#!/usr/bin/python
import urllib2, re, sys
from lxml.html import fromstring, tostring
from PyQt4 import QtCore, QtGui
from ui import steamfriendsui, serverList
from steamquery import query
import threading

NOT_ON_SERVER = r'Not on a server'

class ServerInfo(QtGui.QDialog, serverList.Ui_serverList):
	def __init__(self,parent):
		QtGui.QWidget.__init__(self,parent)
		self.info = ''
		self.setupUi(self)
		self.connect(self.refreshButton, QtCore.SIGNAL("clicked()"), self.get_server_data)

	def convert_time(self,seconds):
		""" Convert data from HLQuery into more human parsable 
		    values
		"""
		seconds = abs(int(seconds))
		hour = abs(seconds/3600)
		min = abs((seconds%3600) / 60)
		seconds = (min % 60)
		if hour < 10:
			hour = "0"+str(hour)
		if min < 10:
			min = "0"+str(min)
		if seconds < 10:
			seconds = "0"+str(seconds)
		
		return "%s:%s:%s" % (hour,min,seconds)	

	def get_server_data(self):
		try:
			try:
				host, port = self.info.split(':')
			except ValueError: # Passed invalid server information
				return None
			hl = query.HLQuery(host,port)
			server_info = hl.get_a2s_info()	
			self.serverInfoWidget.clear()
			self.serverInfoWidget.addItem("Server: %s" % (self.info))
			self.serverInfoWidget.addItem("Hostname: %s" % (server_info['hostname']))
			self.serverInfoWidget.addItem("Map: %s" % (server_info['map']))
			self.serverInfoWidget.addItem("Server Type: %s" % (server_info['dedicated']))
			self.serverInfoWidget.addItem("VAC: %s" % (server_info['secure']))
			self.serverInfoWidget.addItem("Players: %s / %s" % (server_info['players'],server_info['maxplayers']))
			self.serverInfoWidget.addItem("Game: %s" % (server_info['game']))
			self.serverInfoWidget.addItem("Passworded: %s" % (server_info['pass']))
			self.serverInfoWidget.addItem("OS: %s" % (server_info['os']))
			players = hl.get_a2s_player()
			self.tableScores.clearContents()
			self.tableScores.setSortingEnabled(0)
			self.tableScores.setRowCount(len(players))
			self.tableScores.setColumnCount(3)
			row = 0

                        for p in hl.get_a2s_player():
                                player = "%s" % (str(p['player']))
                                time = "%s" % (self.convert_time(p['time']))
                                self.tableScores.setItem(row,0,QtGui.QTableWidgetItem(player))
                                score = QtGui.QTableWidgetItem(u'%10d' % (int(p['score'])))
                                score.setTextAlignment(2)
                                self.tableScores.setItem(row,1,score)
                                self.tableScores.setItem(row,2,QtGui.QTableWidgetItem(time))
                                row += 1

                        self.tableScores.setSortingEnabled(1)
                        self.tableScores.horizontalHeader().setResizeMode(3)
                        self.tableScores.horizontalHeader().setStretchLastSection(1)
                        self.show()
		except AttributeError:
			pass

class FriendsWorker(QtCore.QThread):
	def __init__(self, parent=None):
		QThread.__init__(self,parent)
	def __del__(self):
		self.wait()
	def run(self):
		pass		

class FetchFriends(QtGui.QMainWindow, steamfriendsui.Ui_SteamFriendsStatus):
	def __init__(self):
		QtGui.QWidget.__init__(self)
		self.setupUi(self)
		self.serverinfo = ServerInfo(self)
		self.connect(self.FetchButton, QtCore.SIGNAL("clicked()"), self.get_friend_status)
		self.connect(self.GoButton, QtCore.SIGNAL("clicked()"), self.get_friend_status)	
		self.connect(self.ListSteamFriends, QtCore.SIGNAL("doubleClicked(QModelIndex)"),self.get_server_data)

		self.serverlist = {}
	def get_server_data(self,index):
		""" Get server information """
		info = ''
		# Pass serverlist here, and from the index, find the server
		try:
			info = self.serverlist[self.ListSteamFriends.indexFromItem(self.ListSteamFriends.currentItem()).row()]
			self.serverinfo.info = info
		except KeyError: # Bypass friends that are online, but not on a server
			pass

		# Catch friends online, but not on a server. This prints a meaningful message about 
		# the exception to the user, (before nothing happened at all).
		if NOT_ON_SERVER in self.serverinfo.info:
			QtGui.QMessageBox.information(self,"Confused rocket skating rodent says:","No server information is available for this friend")
			return None

		# Do not display if get_server_data couldn't parse
		if self.serverinfo.get_server_data() is not None:
			self.serverinfo.show()

	def get_friend_status(self):
		""" Populates the list, sends a request to Steam community
			pages for friends list """
		steamid = self.SteamUsername.displayText()
		steamid = str(steamid)
		url = ''
		if re.match(r'http://.*steamcommunity.com/id/.*',steamid):
			url = steamid	
			print url
		elif re.match(r'http://.*steamcommunity.com/profiles/.*',steamid):
			url = steamid		
			print url
		elif url == '':
			if re.match(r'\d',steamid):
					url = 'http://steamcommunity.com/profiles/%s/friends' % (steamid)

			elif re.match(r'([a-zA-Z0-9])',steamid):
					url = 'http://steamcommunity.com/id/%s/friends' % (steamid)
		else:
			print "Whoops, didn't match anything"	
		content = urllib2.build_opener()
		content.addheaders = [('User-agent', 'Mozilla/5.0')]
		try:
			data = content.open(url).read()
			content.close()
		except ValueError, e:
			QtGui.QMessageBox.information(self,"Could not launch space rodents! Please try again!","Our specially trained space rodents on rocket skates could not be launched to fetch your list of friends!\n\nPlease try again by using the following:\nShort alias: http://steamcommunity.com/id/$alias\nID: http://steamcommunity.com/id/$id\nIf you really want to, you can also just cut and paste the full URLs as well.\n\nPlease hurry! Once they're finished eating their fill of expensive space cheese they'll be plotting to take over the world!")
			return 
		except urllib2.URLError, e:
			print 'Failed to connect'
			print 'Reason: ',e.reason
			return
		except urllib2.HTTPError, e:
			print 'Remote server error'
			print 'Error code: ',e.code
			return

		doc = fromstring(data)
		doc.make_links_absolute(url)

		cre = re.compile(r'steam://connect/(.*)')
		cre_game = re.compile(r'In-Game(.*)\s')

		in_game_friends = []
		f = {}
		self.serverlist = {}

		# Parse in game friends and their information 
		for i in doc.find_class('linkFriend_in-game'):
			f_ingame = i.text_content()
			game = cre_game.search(f_ingame)

			for (element, attr, link, pos) in i.iterlinks():
				s = cre.search(link)
				if s:
					f['server'] = s.group(1)
			if 'server' not in f:
				f['server'] = NOT_ON_SERVER
			if game:
				g = re.sub('\s-\sJoin', '', re.sub(r'\t\t', '', game.group(1)))
				f['game'] = g
			else:
				f['friend'] = f_ingame
			if 'server' in f and 'friend' in f and 'game' in f:
				in_game_friends.append(f)
				f = {}
		# In game friends
		for friend in in_game_friends:
			item = "%s\nIn-Game\n%s" % (friend['friend'],friend['game'])
			if friend['server'] is not 'No server':
				item += "\nServer: "+friend['server']
			else:
				item += "\n"+NOT_ON_SERVER
			self.ListSteamFriends.addItem(item)
			
			# Add a key/value pair for reference later
			self.serverlist[self.ListSteamFriends.count() - 1] = friend['server']
		# Online friends	
		for i in doc.find_class('linkFriend_online'):
			line = "%s\nOnline" % (i.text_content())
			self.ListSteamFriends.addItem(line)

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    SteamFriends = FetchFriends()
    SteamFriends.show()
    sys.exit(app.exec_())
